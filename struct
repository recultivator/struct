#include "stdafx.h"
#include "stdlib.h"
#include "stdio.h"
#include "string.h"

/*основные элементы*/
typedef struct 
{
    char slovo[10];
}main_list;

typedef struct main_elem
{
    main_list info;
    struct main_elem *next;//следующий элемент
	struct main_elem *pred;//предыдущий элемент
}main_elem;
 
typedef struct{
    int size;
    main_elem *head;
}list;

list *init_list(void)
{
    list *elem = (list*) malloc(sizeof(list));
    elem->head = NULL;
    return elem;
}

main_elem *init_main_elem(void)
{
    main_elem *elem_ = (main_elem*) malloc(sizeof(main_elem));
    elem_->next = 0;
    return elem_;
}
 
int insert_elem(list *elem, main_list info)
{
    main_elem *elem_ = init_main_elem();
    elem_->info = info;
    elem_->next = elem->head;
    elem->head = elem_;
    elem->size++;
    return 1;
}

/*int insert_new_element(list *elem, int num)
{
        main_elem *elem_, *left, *right;
        int i = 0;
        if((num<0)||(num>=elem->size)) return 0;
        if (num==0)
		{
			elem_=elem->head->next;
            free(elem->head);
            elem->head=elem_;
            return 1;
        }
        for(left= elem->head; i != num-1; elem_ = elem_->next) i++;
        elem_ = left->next;
        right=elem_->next;
        free(elem_); 
        left->next=right;
		elem->size--;
        return 1;
}

void *Add(main_list *ppHead, char *slovo, char *slovo2)
{
    main_list *pOldHead = ppHead;
    main_elem *pNewHead; 
    pNewHead = new main_elem;
    strcpy(pNewHead->, slovo);  
	strcpy(pNewHead->slovo2, slovo2);
    pNewHead->next = pOldHead;
    *ppHead = pNewHead;
    return (void *) pNewHead;
}*/

void Print(list *elem)
{
    main_elem *elem_;
    int i=0;
    for(elem_ = elem->head; elem_ != NULL; elem_ = elem_->next){
        i++;
		printf("%s", elem_->info.slovo);
    }
}

int main()
{
	int d,n;
	main_list info;
    list *elem = init_list();
    do
	{
        printf("slovo: \n");
		gets(info.slovo);
        insert_elem(elem, info);
	}while(strlen(info.slovo)>0);
    Print(elem);
	scanf("%d",&d);
	return 0;
}
